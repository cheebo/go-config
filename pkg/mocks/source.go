// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cheebo/go-config (interfaces: Source)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Bool mocks base method.
func (m *MockSource) Bool(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bool indicates an expected call of Bool.
func (mr *MockSourceMockRecorder) Bool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockSource)(nil).Bool), arg0)
}

// Float mocks base method.
func (m *MockSource) Float(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Float indicates an expected call of Float.
func (mr *MockSourceMockRecorder) Float(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*MockSource)(nil).Float), arg0)
}

// Get mocks base method.
func (m *MockSource) Get(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSourceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSource)(nil).Get), arg0)
}

// Int mocks base method.
func (m *MockSource) Int(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int indicates an expected call of Int.
func (mr *MockSourceMockRecorder) Int(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockSource)(nil).Int), arg0)
}

// Int32 mocks base method.
func (m *MockSource) Int32(arg0 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int32", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int32 indicates an expected call of Int32.
func (mr *MockSourceMockRecorder) Int32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int32", reflect.TypeOf((*MockSource)(nil).Int32), arg0)
}

// Int64 mocks base method.
func (m *MockSource) Int64(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int64 indicates an expected call of Int64.
func (mr *MockSourceMockRecorder) Int64(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64", reflect.TypeOf((*MockSource)(nil).Int64), arg0)
}

// Int8 mocks base method.
func (m *MockSource) Int8(arg0 string) (int8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int8", arg0)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int8 indicates an expected call of Int8.
func (mr *MockSourceMockRecorder) Int8(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int8", reflect.TypeOf((*MockSource)(nil).Int8), arg0)
}

// IsSet mocks base method.
func (m *MockSource) IsSet(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSet", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSet indicates an expected call of IsSet.
func (mr *MockSourceMockRecorder) IsSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSet", reflect.TypeOf((*MockSource)(nil).IsSet), arg0)
}

// Slice mocks base method.
func (m *MockSource) Slice(arg0 string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slice", arg0)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Slice indicates an expected call of Slice.
func (mr *MockSourceMockRecorder) Slice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockSource)(nil).Slice), arg0)
}

// SliceInt mocks base method.
func (m *MockSource) SliceInt(arg0 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SliceInt", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SliceInt indicates an expected call of SliceInt.
func (mr *MockSourceMockRecorder) SliceInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SliceInt", reflect.TypeOf((*MockSource)(nil).SliceInt), arg0)
}

// SliceString mocks base method.
func (m *MockSource) SliceString(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SliceString", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SliceString indicates an expected call of SliceString.
func (mr *MockSourceMockRecorder) SliceString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SliceString", reflect.TypeOf((*MockSource)(nil).SliceString), arg0)
}

// String mocks base method.
func (m *MockSource) String(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// String indicates an expected call of String.
func (mr *MockSourceMockRecorder) String(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockSource)(nil).String), arg0)
}

// StringMap mocks base method.
func (m *MockSource) StringMap(arg0 string) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMap", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// StringMap indicates an expected call of StringMap.
func (mr *MockSourceMockRecorder) StringMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMap", reflect.TypeOf((*MockSource)(nil).StringMap), arg0)
}

// StringMapInt mocks base method.
func (m *MockSource) StringMapInt(arg0 string) map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMapInt", arg0)
	ret0, _ := ret[0].(map[string]int)
	return ret0
}

// StringMapInt indicates an expected call of StringMapInt.
func (mr *MockSourceMockRecorder) StringMapInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMapInt", reflect.TypeOf((*MockSource)(nil).StringMapInt), arg0)
}

// StringMapSliceString mocks base method.
func (m *MockSource) StringMapSliceString(arg0 string) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMapSliceString", arg0)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// StringMapSliceString indicates an expected call of StringMapSliceString.
func (mr *MockSourceMockRecorder) StringMapSliceString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMapSliceString", reflect.TypeOf((*MockSource)(nil).StringMapSliceString), arg0)
}

// StringMapString mocks base method.
func (m *MockSource) StringMapString(arg0 string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringMapString", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// StringMapString indicates an expected call of StringMapString.
func (mr *MockSourceMockRecorder) StringMapString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringMapString", reflect.TypeOf((*MockSource)(nil).StringMapString), arg0)
}

// UInt mocks base method.
func (m *MockSource) UInt(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UInt", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UInt indicates an expected call of UInt.
func (mr *MockSourceMockRecorder) UInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UInt", reflect.TypeOf((*MockSource)(nil).UInt), arg0)
}

// UInt32 mocks base method.
func (m *MockSource) UInt32(arg0 string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UInt32", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UInt32 indicates an expected call of UInt32.
func (mr *MockSourceMockRecorder) UInt32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UInt32", reflect.TypeOf((*MockSource)(nil).UInt32), arg0)
}

// UInt64 mocks base method.
func (m *MockSource) UInt64(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UInt64", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UInt64 indicates an expected call of UInt64.
func (mr *MockSourceMockRecorder) UInt64(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UInt64", reflect.TypeOf((*MockSource)(nil).UInt64), arg0)
}
